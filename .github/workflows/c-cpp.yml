name: CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        config:
          - {name: "Linux", os: ubuntu-latest, cmake-generator: ""}
          - {name: "Windows", os: windows-latest, cmake-generator: "-G \"MinGW Makefiles\""}
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.name }}

    steps:
    - uses: actions/checkout@v2
    - name: Requirements
      shell: bash
      run: |
        pip install pillow
        cd ..
        git clone https://github.com/tensorflow/tflite-micro.git tensorflow
        cd tensorflow
        git checkout f474248365ad48654ba8a27ac5bf49a6afbb80e7
        git apply ../tflite_micro_compiler/patches/tflite-micro.patch
        git apply ../tflite_micro_compiler/patches/tflite-micro-makefile.patch
        make -Bf tensorflow/lite/micro/tools/make/Makefile NO_INTERPRETER=TRUE microlite
        make -Bf tensorflow/lite/micro/tools/make/Makefile microlite
    - name: Requirements (Windows)
      if: matrix.config.os == 'windows-latest'
      run: |
        choco install wget unzip
    - name: Configure
      shell: bash
      run: |
        mkdir build
        cd build
        cmake ${{ matrix.config.cmake-generator }} ..
    - name: Compile
      shell: bash
      run: |
        cd build
        cmake --build .
    - name: Run
      shell: bash
      run: |
        cd build
        wget https://storage.googleapis.com/download.tensorflow.org/models/tflite/micro/hello_world_2020_04_13.zip
        unzip hello_world_2020_04_13.zip
        ./compiler hello_world/models/model.tflite out.cpp
    - name: Test setup
      run: |
        cd examples/generic_test
        mkdir build
        cd build
        cmake ${{ matrix.config.cmake-generator }} ..
        cmake --build .
        # Binary representation of output -1.09 (~sin(1.5*PI))
        echo "\xd6\xf3\x8b\xbf" > outExpect.txt
    # Binary representation of input 4.71 (1.5*PI)
    - name: Test setup (Windows)
      if: matrix.config.os == 'windows-latest'
      run: |
        cd examples/generic_test/build
        echo 52 b8 96 40 > inData.tmp
        certutil -f -decodehex inData.tmp inData.bin
    - name: Test setup (Linux)
      if: matrix.config.os == 'ubuntu-latest'
      run: |
        cd examples/generic_test/build
        echo -n -e '\x52\xb8\x96\x40' > inData.bin
    - name: Test run
      shell: bash
      run: |
        cd examples/generic_test/build
        ./generic_test inData.bin > outData.txt
        cmp outData.txt outExpect.txt
